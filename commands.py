import main
import ekool
import sqlite3
import datetime
import json
import vk_api
import AssignmentTimeframe
import math
import Assignment
from vk_api.keyboard import VkKeyboard, VkKeyboardColor, VkKeyboardButton

conn = sqlite3.connect('database.db')
cur = conn.cursor()

cur.execute('''CREATE TABLE IF NOT EXISTS users (
	id integer PRIMARY KEY,
	userId int NOT NULL,
	logged_in bit DEFAULT 0,
	access_token text DEFAULT NULL,
	refresh_token text DEFAULT NULL,
	joined date,
	language_code char(2) DEFAULT "ru",
	eula bit DEFAULT 0
);
''')
conn.commit()


def convert_size(size_bytes):
   if size_bytes == 0:
       return "0B"
   size_name = ("B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB")
   i = int(math.floor(math.log(size_bytes, 1024)))
   p = math.pow(1024, i)
   s = round(size_bytes / p, 2)
   return "%s %s" % (s, size_name[i])

def get_day_from_id(id):
    if id == "mo":
        return 0
    if id == "tu":
        return 1
    if id == "we":
        return 2
    if id == "th":
        return 3
    if id == "fr":
        return 4
    if id == "sa":
        return 5
    if id == "su":
        return 6
    else:
        return None


def getDayNameById(id):
    if id == "mo":
        return "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
    elif id == "tu":
        return "–í—Ç–æ—Ä–Ω–∏–∫"
    elif id == "we":
        return "–°—Ä–µ–¥–∞"
    elif id == "th":
        return "–ß–µ—Ç–≤–µ—Ä–≥"
    elif id == "fr":
        return "–ü—è—Ç–Ω–∏—Ü–∞"
    elif id == "sa":
        return "–°—É–±–±–æ—Ç–∞"
    elif id == "su":
        return "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    else:
        return None

def getCurrDayId(day):
    day = day.lower()
    if day == "monday":
        return "mo"
    elif day == "tuesday":
        return "tu"
    elif day == "wednesday":
        return "we"
    elif day == "thursday":
        return "th"
    elif day == "friday":
        return "fr"
    elif day == "saturday":
        return "sa"
    elif day == "sunday":
        return "su"
    else:
        return None

def getWeekNameById(id):
    if id == "next":
        return "–°–ª–µ–¥—É—é—â–∞—è"
    elif id == "this":
        return "–¢–µ–∫—É—â–∞—è"
    elif id == "previous":
        return "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
    else:
        return None


def getUser(uid):
    cur.execute('SELECT * FROM users WHERE (userId=?)', (uid,))
    user = cur.fetchone()
    if user is None:
        cur.execute('INSERT INTO users (userId, logged_in, access_token, refresh_token, joined) VALUES (?,?,?,?,?)',
                    (uid, 0, None, None, datetime.date.today()))
        conn.commit()
        return getUser(uid)
    else:
        return user


def updateUser(uid, param, value):
    cur.execute('''UPDATE users SET ''' + param + ''' = ? WHERE userId = ?''', (value, uid))
    conn.commit()
    return getUser(uid)


def processCommand(event, isBotEventType=False):
    if isBotEventType:
        event_obj = event.object
        uid = event_obj.user_id
        command = event_obj.payload.get('type')
        args = [event_obj.payload.get('param')]
    else:
        event_obj = event.obj
        uid = event_obj.message["from_id"]
        text = event.message["text"].split()
        command = text[0].lower()
        text.pop(0)
        args = text

    user = getUser(uid)
    # help
    if command in ['–ø–æ–º–æ—â—å', '–∫–æ–º–∞–Ω–¥—ã', 'help', 'commands']:
        response = "‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ:\nhttps://vk.com/@ekool_bot-help"
        return {"error": None, "response": response, "keyboard": None}
    # login
    if command in ['–≤—Ö–æ–¥', '–≤–æ–π—Ç–∏', 'login']:
        if user[2] != 1:
            if len(args) != 2:
                return {"error": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n–≤–æ–π—Ç–∏ –õ–û–ì–ò–ù –ü–ê–†–û–õ–¨", "keyboard": None}
            else:
                obj = ekool.bot_login(args[0], args[1])
                if obj["logged_in"] is False:
                    return {"error": "–í—Ö–æ–¥ –≤ eKool –Ω–µ —É–¥–∞–ª—Å—è. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.",
                            "keyboard": None}
                else:
                    updateUser(uid, "logged_in", 1)
                    updateUser(uid, "access_token", obj["access_token"])
                    updateUser(uid, "refresh_token", obj["refresh_token"])
                    response = "‚úîÔ∏è –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç eKool!\n–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π '–ø—Ä–æ—Ñ–∏–ª—å'.\n\n‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É–∫–∞–∑—ã–≤–∞–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞."

                    return {"error": None, "response": response, "keyboard": None}
        else:
            ekool_data = ekool.get_person_data(user[3])
            return {"error": f"–£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è ({ekool_data['name1']} {ekool_data['name2']})\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–≤—ã–π—Ç–∏', —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—ë.",
                    "keyboard": None}
    # logout
    if command in ['–≤—ã—Ö–æ–¥', '–≤—ã–π—Ç–∏', 'logout']:
        if user[2] != 0:
            updateUser(uid, "logged_in", 0)
            updateUser(uid, "access_token", None)
            updateUser(uid, "refresh_token", None)
            response = "‚úîÔ∏è –°–µ—Å—Å–∏—è eKool –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
            return {"error": None, "response": response, "keyboard": None}
        else:
            return {"error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π eKool.\n–í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É '–≤–æ–π—Ç–∏'.",
                    "keyboard": None}

    # logout
    if command in ['deletable-msg']:
        keyboard = VkKeyboard(inline=True, one_time=False)
        keyboard.add_callback_button(label="–£–¥–∞–ª–∏—Ç—å", color=VkKeyboardColor.NEGATIVE, payload={"type": "delete_msg"})
        return {"error": None, "response": "–£–¥–∞–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "keyboard": keyboard.get_keyboard()}

    # get grades for role
    if command == "get_grades":
        if user[2] != 0:
            ekool_data = ekool.get_person_data(access_token=user[3])
            response = None
            for role in ekool_data['roles']:
                if len(args) == 0:
                    return {"error": "–ù–µ –∑–∞–¥–∞–Ω ID —Ä–æ–ª–∏.", "response": response, "keyboard": None}
                if role["studentId"] == args[0]:
                    response = f"üìñ –û—Ü–µ–Ω–∫–∏ {role['firstName']} ({role['schoolName']})\n–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
            if response is not None:
                return {"error": None, "response": response, "keyboard": None}
            else:
                return {"error": "–í –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç —Ç–∞–∫–æ–π —Ä–æ–ª–∏.", "response": response, "keyboard": None}
        else:
            return {"error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π eKool.\n–í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É '–≤–æ–π—Ç–∏'.",
                    "keyboard": None}

    # get todos for role
    if command == "get_todo":
        if user[2] != 0:
            ekool_data = ekool.get_person_data(access_token=user[3])
            keyboard = None
            response = None
            for role in ekool_data['roles']:
                if len(args) == 0:
                    return {"error": "–ù–µ –∑–∞–¥–∞–Ω ID —Ä–æ–ª–∏.", "response": response, "keyboard": None}
                if role["studentId"] == args[0]:
                    response = f"üìñ –ó–∞–¥–∞–Ω–∏—è –¥–ª—è {role['firstName']} ({role['schoolName']})"
                    weeks = [{"id": "previous", "name": "–ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è", "color": VkKeyboardColor.SECONDARY},
                             {"id": "this", "name": "–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", "color": VkKeyboardColor.PRIMARY},
                             {"id": "next", "name": "–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", "color": VkKeyboardColor.SECONDARY}]
                    kb = VkKeyboard(inline=True, one_time=False)
                    for i, week in enumerate(weeks):
                        if i:
                            kb.add_line()
                        kb.add_callback_button(label=week['name'], color=week['color'],
                                               payload={"type": "get_todo_week",
                                                        "param": f"{week['id']}:{role['studentId']}"})
                    keyboard = kb.get_keyboard()
            if response is not None:
                return {"error": None, "response": response, "keyboard": keyboard}
            else:
                return {"error": "–í –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç —Ç–∞–∫–æ–π —Ä–æ–ª–∏.", "response": response, "keyboard": None}
        else:
            return {"error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π eKool.\n–í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É '–≤–æ–π—Ç–∏'.",
                    "keyboard": None}

    # get week todos for role
    if command == "get_todo_week":
        if user[2] != 0:
            args = args[0].split(":")
            ekool_data = ekool.get_person_data(access_token=user[3])
            keyboard = None
            response = None
            for role in ekool_data['roles']:
                if len(args) == 0:
                    return {"error": "–ù–µ –∑–∞–¥–∞–Ω–∞ –Ω–µ–¥–µ–ª—è –∏ ID —Ä–æ–ª–∏.", "response": response, "keyboard": None}

                if role["studentId"] == int(args[1]):
                    if args[0] in ["previous", "this", "next"] and getWeekNameById(args[0]) is not None:
                        response = f"üìñ –ó–∞–¥–∞–Ω–∏—è –¥–ª—è {role['firstName']} ({role['schoolName']})\nüìÖ {getWeekNameById(args[0])} –Ω–µ–¥–µ–ª—è"
                        days = [{"id": "mo", "name": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "color": VkKeyboardColor.PRIMARY},
                                {"id": "tu", "name": "–í—Ç–æ—Ä–Ω–∏–∫", "color": VkKeyboardColor.PRIMARY},
                                {"id": "we", "name": "–°—Ä–µ–¥–∞", "color": VkKeyboardColor.PRIMARY},
                                {"id": "th", "name": "–ß–µ—Ç–≤–µ—Ä–≥", "color": VkKeyboardColor.PRIMARY},
                                {"id": "fr", "name": "–ü—è—Ç–Ω–∏—Ü–∞", "color": VkKeyboardColor.PRIMARY},
                                {"id": "sa", "name": "–°—É–±–±–æ—Ç–∞", "color": VkKeyboardColor.NEGATIVE},
                                {"id": "su", "name": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "color": VkKeyboardColor.NEGATIVE}]
                        kb = VkKeyboard(inline=True, one_time=False)
                        for i, day in enumerate(days):
                            if i & i % 2 != 0:
                                kb.add_line()
                            color = day['color']
                            if args[0] == "this" and getCurrDayId(datetime.datetime.today().strftime("%A")) == day['id']:
                                color = VkKeyboardColor.POSITIVE
                            kb.add_callback_button(label=day['name'], color=color,
                                                       payload={"type": "get_todo_day",
                                                                "param": f"{args[0]}:{day['id']}:{role['studentId']}"})
                        keyboard = kb.get_keyboard()
                    else:
                        return {"error": "–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID –Ω–µ–¥–µ–ª–∏.", "response": None, "keyboard": None}
            if response is not None:
                return {"error": None, "response": response, "keyboard": keyboard}
            else:
                return {"error": "–í –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç —Ç–∞–∫–æ–π —Ä–æ–ª–∏.", "response": response, "keyboard": None}
        else:
            return {"error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π eKool.\n–í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É '–≤–æ–π—Ç–∏'.",
                    "keyboard": None}

    # get day todos for role
    if command == "get_todo_day":
        if user[2] != 0:
            args = args[0].split(":")
            ekool_data = ekool.get_person_data(access_token=user[3])
            keyboard = None
            response = None
            for role in ekool_data['roles']:
                if len(args) == 0:
                    return {"error": "–ù–µ –∑–∞–¥–∞–Ω –¥–µ–Ω—å –∏ ID —Ä–æ–ª–∏.", "response": response, "keyboard": None}

                if role["studentId"] == int(args[2]):
                    if args[0] in ["previous", "this", "next"] and getWeekNameById(args[0]) is not None:
                        if args[1] in ["mo", "tu", "we", "th", "fr", "sa", "su"] and getDayNameById(args[1]) is not None and get_day_from_id(args[1]) is not None:
                            this_monday = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())
                            if args[0] == "previous":
                                start_delta = this_monday + datetime.timedelta(days=get_day_from_id(args[1]), weeks=-1)
                            elif args[0] == "this":
                                start_delta = this_monday + datetime.timedelta(days=get_day_from_id(args[1]), weeks=0)
                            elif args[0] == "next":
                                start_delta = this_monday + datetime.timedelta(days=get_day_from_id(args[1]), weeks=1)
                            else:
                                return {"error": "–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID –Ω–µ–¥–µ–ª–∏.", "response": None, "keyboard": None}

                            todos = ekool.get_assignments_for_timeframe(startingDate=start_delta, endDate=start_delta, access_token=user[3], student_id=role['studentId'])
                            assignments = todos.assignments
                            sep = "----------------------------------\n"
                            todo_content = ""
                            keyboard = None
                            kb = None
                            attachments = []
                            if len(assignments) > 0:
                                for i, assignment in enumerate(assignments):
                                    files_content = ""
                                    is_done = "‚ùå"
                                    if assignment.is_done:
                                        is_done = "‚úî"
                                    if i:
                                        todo_content += sep
                                    if assignment.teacher_attachments is not None:
                                        files_content = "\n\nüîó –§–∞–π–ª—ã —É—á–∏—Ç–µ–ª—è:\n"
                                        for i, attachment in enumerate(assignment.teacher_attachments):
                                            if i:
                                                files_content += "\n"
                                            attachments.append(attachment)
                                            files_content += f"{i+1}. {attachment['fileName']} ({convert_size(attachment['size'])})"
                                    todo_content += f"{is_done} {assignment.subject_name} ‚Ä¢ {assignment.title}\n{assignment.content}{files_content}\n"

                                if len(attachments) != 0:
                                    kb = VkKeyboard(one_time=False, inline=True)
                                    for i, attachment in enumerate(attachments):
                                        if i:
                                            kb.add_line()
                                        kb.add_callback_button(label=f"{attachment['fileName']} ({convert_size(attachment['size'])})",color=VkKeyboardColor.PRIMARY, payload={"type": "open_link","link": f"https://ekool.eu{attachment['url']}"})

                                    if kb is not None:
                                        keyboard = kb.get_keyboard()
                                todo_content += sep
                            todo_content = todo_content.replace('</strong>', '').replace('<strong>', '').replace('&laquo;', '¬´').replace('&quot;', '"').replace('&raquo;', '¬ª').replace('<br />', '\n').replace('&nbsp;', '').replace('<body>', '').replace('<p>', '\n').replace('<br>', '\n').replace('<br>', '').replace('</ol>', '').replace('<ol>', '').replace('</body>', '').replace('</p>', '').replace('</li>', '').replace('<li>', '').replace('</a>',' ').replace('" target="_blank">',' ').replace('<a href="','')
                            if len(todo_content) == 0:
                                todo_content = "–ó–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ."
                            response = f"üìñ –ó–∞–¥–∞–Ω–∏—è –¥–ª—è {role['firstName']} ({role['schoolName']})\nüìÖ {getWeekNameById(args[0])} –Ω–µ–¥–µ–ª—è, {getDayNameById(args[1])}\n{sep}{todo_content}"
                        else:
                            return {"error": "–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID –¥–Ω—è.", "response": None, "keyboard": None}
                    else:
                        return {"error": "–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID –Ω–µ–¥–µ–ª–∏.", "response": None, "keyboard": None}
            if response is not None:
                return {"error": None, "response": response, "keyboard": keyboard}
            else:
                return {"error": "–í –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç —Ç–∞–∫–æ–π —Ä–æ–ª–∏.", "response": response, "keyboard": None}
        else:
            return {"error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π eKool.\n–í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É '–≤–æ–π—Ç–∏'.",
                    "keyboard": None}

    # get absences for role
    if command == "get_absences":
        if user[2] != 0:
            ekool_data = ekool.get_person_data(access_token=user[3])
            response = None
            for role in ekool_data['roles']:
                if len(args) == 0:
                    return {"error": "–ù–µ –∑–∞–¥–∞–Ω ID —Ä–æ–ª–∏.", "response": response, "keyboard": None}
                if role["studentId"] == args[0]:
                    absences = ekool.get_absences(access_token=user[3], student_id=role['studentId'])
                    abs_content = ""
                    for i, absence in enumerate(absences):
                        if i:
                            abs_content += "\n"
                        abs_content += f"[{absence['code']}] {absence['lessonDate']}: {absence['subjectName']} ({absence['lessonNumber']})"
                    response = f"üìñ –û—Ç—Å—É—Ç—Å—Ç–≤–∏—è {role['firstName']} –∑–∞ 3 –º–µ—Å—è—Ü–∞ ({role['schoolName']})\n{abs_content}"
            if response is not None:
                return {"error": None, "response": response, "keyboard": None}
            else:
                return {"error": "–í –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç —Ç–∞–∫–æ–π —Ä–æ–ª–∏.", "response": response, "keyboard": None}
        else:
            return {"error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π eKool.\n–í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É '–≤–æ–π—Ç–∏'.",
                    "keyboard": None}

    # get-role (for btn payload)
    if command == "get_role":
        if user[2] != 0:
            ekool_data = ekool.get_person_data(access_token=user[3])
            response = None
            error = "–í –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç —Ç–∞–∫–æ–π —Ä–æ–ª–∏."
            for role in ekool_data['roles']:
                if len(args) == 0:
                    return {"error": "–ù–µ –∑–∞–¥–∞–Ω ID —Ä–æ–ª–∏.", "response": response, "keyboard": None}
                if role["studentId"] == args[0]:
                    new_grades = ""
                    new_todo = ""
                    new_abs = ""
                    keyboard = VkKeyboard(one_time=False, inline=True)
                    if role["timetableUrl"] is not None:
                        keyboard.add_callback_button(
                            label="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                            color=VkKeyboardColor.SECONDARY,
                            payload={"type": "open_link", "link": role['timetableUrl']}
                        )
                        keyboard.add_line()

                    if role['newGrades'] > 0:
                        new_grades = f" ({role['newGrades']} –Ω–æ–≤—ã—Ö)"
                    keyboard.add_callback_button(
                        label="–û—Ü–µ–Ω–∫–∏" + new_grades,
                        color=VkKeyboardColor.PRIMARY,
                        payload={"type": "get_grades", "param": role['studentId']}
                    )
                    keyboard.add_line()
                    if role['newTodos'] > 0:
                        new_todo = f" ({role['newTodos']} –Ω–æ–≤—ã—Ö)"
                    keyboard.add_callback_button(
                        label="–ó–∞–¥–∞–Ω–∏—è" + new_todo,
                        color=VkKeyboardColor.PRIMARY,
                        payload={"type": "get_todo", "param": role['studentId']}
                    )
                    keyboard.add_line()
                    if role['newAbsences'] > 0:
                        new_abs = f" ({role['newAbsences']} –Ω–æ–≤—ã—Ö)"
                    keyboard.add_callback_button(
                        label="–û—Ç—Å—É—Ç—Å—Ç–≤–∏—è" + new_abs,
                        color=VkKeyboardColor.PRIMARY,
                        payload={"type": "get_absences", "param": role['studentId']}
                    )
                    response = f"üë• {role['schoolName']}\nüë§ {role['firstName']} {role['lastName']}"
            if response is not None:
                return {"error": None, "response": response, "keyboard": keyboard.get_keyboard()}
            else:
                return {"error": error, "response": response, "keyboard": None}
        else:
            return {"error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π eKool.\n–í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É '–≤–æ–π—Ç–∏'.",
                    "keyboard": None}

    # profile
    if command in ['–ø—Ä–æ—Ñ–∏–ª—å', '–∞–∫–∫–∞—É–Ω—Ç', 'account', 'profile']:
        main_data = f"üìÖ –ü–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ: {user[5]}"
        ekool_sess_data = "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π."
        keyboard_use = None
        if user[2] != 0:
            ekool_data = ekool.get_person_data(access_token=user[3])
            ekool_sess_data = f"üë§ {ekool_data['name1']} {ekool_data['name2']} ({ekool_data['adData']['age'][0]})\nüë• –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: {len(ekool_data['roles'])}"
            keyboard = VkKeyboard(one_time=False, inline=True)
            keyboard.add_callback_button(
                label=f"–†–æ–ª–∏",
                color=VkKeyboardColor.PRIMARY,
                payload={"type": "roles", "param": None}
            )
            keyboard_use = keyboard.get_keyboard()
        response = f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n{main_data}\n\n–°–µ—Å—Å–∏—è eKool:\n{ekool_sess_data}"
        return {"error": None, "response": response, "keyboard": keyboard_use}
    # roles
    if command in ['—Ä–æ–ª–∏', 'roles']:
        if user[2] != 0:
            ekool_data = ekool.get_person_data(access_token=user[3])
            if len(ekool_data['roles']) > 0:
                response = f"üë• –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ ({len(ekool_data['roles'])})"
                keyboard = VkKeyboard(one_time=False, inline=True)
                for i, role in enumerate(ekool_data['roles']):
                    if i:
                        keyboard.add_line()
                    keyboard.add_callback_button(
                        label=f"{str(role['schoolName'])} ({role['firstName']} {role['lastName'][0]})",
                        color=VkKeyboardColor.PRIMARY,
                        payload={"type": "get_role", "param": role['studentId']}
                    )

                return {"error": None, "response": response, "keyboard": keyboard.get_keyboard()}
            else:
                return {"error": None, "response": f"üë• –£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ä–æ–ª–∏.", "keyboard": None}
        else:
            return {"error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π eKool.", "keyboard": None}

    # not found
    else:
        return {
            "error": "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ:\nhttps://vk.com/@ekool_bot-help",
            "keyboard": None}
